library ieee;
use ieee.std_logic_1164.all;

entity Proyect5 is

	port(
	-- entrada
		clk		 : in	std_logic;
		rojo_in,verde_in,azul_in	 : in	std_logic_vector(5 downto 0);
		reset	 : in	std_logic;
	-- salidas
		VGA_HS,VGA_VS,VGA_Blank,VGA_Sync,VGA_Clk: out std_logic;
		rojo_out,verde_out,azul_out : out std_logic_vector(9 downto 0);
		output	 : out	std_logic_vector(1 downto 0)
		
	);

end entity;

architecture rtl of Proyect5 is

	-- Build an enumerated type for the state machine
	type state_type is (s0, s1, s2, s3);

	-- Register to hold the current state
	signal state   : state_type;
	signal clk_2 : std_logic;
begin

	gen_clk : process(clk)
		variable cont_int : integer range 0 to 1;
	begin
		if rising_edge(clk) then
			cont_int:=cont_int+1;
			if cont_int=1 then
				clk_2<=not clK_2;
			end if;
		end if;
	end process;
	vga_Clk<=clk_2; -- le asignamos el clk de 25MHZ
	
	
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= s0;
		elsif (rising_edge(clk)) then
			case state is
				when s0=>
					if input = '1' then
						state <= s1;
					else
						state <= s0;
					end if;
				when s1=>
					if input = '1' then
						state <= s2;
					else
						state <= s1;
					end if;
				when s2=>
					if input = '1' then
						state <= s3;
					else
						state <= s2;
					end if;
				when s3 =>
					if input = '1' then
						state <= s0;
					else
						state <= s3;
					end if;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
			when s0 =>
				output <= "00";
			when s1 =>
				output <= "01";
			when s2 =>
				output <= "10";
			when s3 =>
				output <= "11";
		end case;
	end process;

end rtl;
